kind: pipeline
type: docker
name: test

steps:
  - name: Test Python
    image: python:3.13-slim-bookworm
    commands:
      - apt-get update && apt-get install -y curl git xz-utils
      - curl https://qlty.sh | sh
      - ln -fs .env.development .env
      - pip install -e .[test]
      - ruff check .
      - gunicorn -c config/gunicorn.conf.py --check-config
      - mypy .
      - coverage run -m unittest discover
      - coverage report -m
      - coverage lcov -o .coverage.lcov
      - ~/.qlty/bin/qlty coverage publish .coverage.lcov --override-commit-sha "$DRONE_COMMIT_SHA" --override-branch "$DRONE_BRANCH" --override-build-id "$DRONE_BUILD_NUMBER"
    environment:
      QLTY_COVERAGE_TOKEN: qltcp_eEGvDqcxehmg73W8

  - name: Test Node
    image: satantime/puppeteer-node:24-bookworm-slim
    commands:
      - ln -fs .env.development .env
      - npm ci
      - npm test
    environment:
      GIT_VERSION: ${DRONE_COMMIT}
      GIT_BRANCH: ${DRONE_BRANCH}

  - name: Test Bash
    image: koalaman/shellcheck-alpine:stable
    commands:
      - ln -fs .env.development .env
      - shellcheck -x bin/*.sh

  - name: Test Dockerfile
    image: hadolint/hadolint:latest-alpine
    commands:
      - hadolint Dockerfile --ignore=DL3008 --ignore=SC2046 --ignore=SC2006

  - name: Test Nginx
    image: getpagespeed/gixy:v0.2.7
    commands:
      - gixy config/nginx/*

  - name: Build Docker Container
    depends_on:
      - Test Dockerfile
    image: plugins/docker:20
    settings:
      repo: base-flask
      tags: test
      dry_run: true

  #- name: Deploy
  #  depends_on:
  #    - Test Python
  #    - Test Node
  #    - Test Bash
  #    - Test Nginx
  #    - Build Docker Container
  #  environment:
  #    SSH_KEY:
  #      from_secret: ssh_key
  #  image: albertyw/ssh-client:4.1.8
  #  commands:
  #    - ssh-keyscan $HOSTNAME >> /root/.ssh/known_hosts
  #    - echo "$${SSH_KEY}" > /root/.ssh/id_ed25519
  #    - chmod 600 /root/.ssh/id_ed25519
  #    - ssh USERNAME@$HOSTNAME $REPO_PATH/bin/deploy.sh master
  #  when:
  #    branch:
  #      - master

trigger:
  event:
    exclude:
      - cron

---
kind: pipeline
type: docker
name: refresh-varsnap-production-snaps
steps:
  - name: Refresh Varsnap Python Production Snaps
    image: python:3.13-slim-bookworm
    commands:
      - ln -fs .env.development .env
      - pip install -e .[test]
      - python baseflask/refresh_varsnap.py
  - name: Refresh Varsnap Javascript Production Snaps
    image: satantime/puppeteer-node:24-bookworm-slim
    commands:
      - ln -fs .env.development .env
      - npm ci
      - npx tsx baseflask/refresh-varsnap.ts
trigger:
  cron:
    - refresh-varsnap-production-snaps
